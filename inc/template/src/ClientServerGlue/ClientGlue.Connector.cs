// Auto generated by nant generateGlue
// From a template at inc\template\src\ClientServerGlue\ClientGlue.Connector.cs
//
// Do not modify this file manually!
//
{#GPLFILEHEADER}

using System;
using System.IO;
using System.Threading;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using Ict.Common;
using Ict.Common.Remoting.Shared;
{#USINGNAMESPACES}

namespace Ict.Common.Remoting.Client
{
    /// generated code because the standalone application will link to the server,
    /// but the client application should not contain all the server dlls
    public class TConnectionHelper
    {
        /// connect to the server
        static public IClientManagerInterface Connect()
        {
            {#CONNECTOR}
        }
    }
    
{#IFDEF HTTPREMOTING}
    /// manually written client side for this special UIConnector
    public class TAsynchronousExecutionProgress : IAsynchronousExecutionProgress
    {
        private Guid FObjectID = new Guid();
        
        /// constructor, this UIConnector is created from the property of another UIConnector
        public TAsynchronousExecutionProgress(Guid ObjectID)
        {
            FObjectID = ObjectID;
        }
        
        /// <summary>
        /// some text information about current progress
        /// </summary>
        public String ProgressInformation
        {
            get
            {
                return (string) THttpConnector.ReadUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressInformation", "System.String");
            }
            set
            {
                THttpConnector.WriteUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressInformation", value);
            }
        }

        /// <summary>
        /// progress percentage
        /// </summary>
        public Int16 ProgressPercentage
        {
            get
            {
                return (Int16) THttpConnector.ReadUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressPercentage", "System.Int16");
            }
            set
            {
                THttpConnector.WriteUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressPercentage", value);
            }
        }

        /// <summary>
        /// progress state
        /// </summary>
        public TAsyncExecProgressState ProgressState
        {
            get
            {
                return (TAsyncExecProgressState) THttpConnector.ReadUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressState", "binary");
            }
            set
            {
                THttpConnector.WriteUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "ProgressState", value);
            }
        }

        /// <summary>
        /// todoComment
        /// </summary>
        public object Result
        {
            get
            {
                return THttpConnector.ReadUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "Result", "binary");
            }
            set
            {
                THttpConnector.WriteUIConnectorProperty(FObjectID, "TAsynchronousExecutionProgress", "Result", value);
            }
        }

        /// <summary>
        /// get all 3 properties at once
        /// </summary>
        /// <param name="ProgressState"></param>
        /// <param name="ProgressPercentage"></param>
        /// <param name="ProgressInformation"></param>
        public void ProgressCombinedInfo(out TAsyncExecProgressState ProgressState, out Int16 ProgressPercentage, out String ProgressInformation)
        {
            SortedList<string, object> ActualParameters = new SortedList<string, object>();
            List<object> Result = THttpConnector.CallUIConnectorMethod(FObjectID, "TAsynchronousExecutionProgress", "ProgressCombinedInfo", ActualParameters, "list");
            ProgressState = (TAsyncExecProgressState) Result[0];
            ProgressPercentage = (System.Int16) Result[1];
            ProgressInformation = (System.String) Result[2];
        }

        /// <summary>
        /// cancel the operation that is monitored
        /// </summary>
        public void Cancel()
        {
            SortedList<string, object> ActualParameters = new SortedList<string, object>();
            List<object> Result = THttpConnector.CallUIConnectorMethod(FObjectID, "TAsynchronousExecutionProgress", "Cancel", ActualParameters, "void");
        }
    }
{#ENDIF HTTPREMOTING}
}

{##CONNECTORSTANDALONE}
// this is code for the standalone openpetra, there is no server, only one single application
TServerManager TheServerManager = new TServerManager();

//
// Connect to main Database
//
try
{
    TheServerManager.EstablishDBConnection();
}
catch (FileNotFoundException ex)
{
    TLogging.Log(ex.Message);
    TLogging.Log("Please check your OpenPetra.build.config file ...");
    TLogging.Log("Maybe a nant initConfigFile helps ...");
    throw new ApplicationException();
}
catch (Exception)
{
    throw;
}

return new TClientManager();

{##CONNECTORCLIENTSERVER}
// TODO
return null;