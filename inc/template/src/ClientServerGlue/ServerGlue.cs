// Auto generated by nant generateGlue
// From a template at inc\template\src\ClientServerGlue\ServerGlue.cs
//
// Do not modify this file manually!
//
{#GPLFILEHEADER}

using System;
using System.Threading;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Web;
using System.Web.Services;
using System.Web.Script.Services;
using System.ServiceModel.Web;
using System.ServiceModel;
using Ict.Common;
using Ict.Common.Data;
using Ict.Common.Verification;
using Ict.Common.Remoting.Shared;
using Ict.Petra.Shared;
using Ict.Petra.Server.App.Core.Security;
using Ict.Petra.Server.App.Core;
{#USINGNAMESPACES}

namespace Ict.Petra.Server.app.WebService
{
/// <summary>
/// this publishes the SOAP web services of OpenPetra.org for module {#TOPLEVELMODULE}
/// </summary>
[WebService(Namespace = "http://www.openpetra.org/webservices/M{#TOPLEVELMODULE}")]
[ScriptService]
public class TM{#TOPLEVELMODULE}WebService : System.Web.Services.WebService
{
    private static SortedList<string, object> FUIConnectors = new SortedList<string, object>();

    /// <summary>
    /// constructor, which is called for each http request
    /// </summary>
    public TM{#TOPLEVELMODULE}WebService() : base()
    {
        TOpenPetraOrgSessionManager.Init();
    }

    /// disconnect an UIConnector object
    public void DisconnectUIConnector(string UIConnectorObjectID)
    {
        string ObjectID = UIConnectorObjectID + " " + DomainManager.GClientID;

        if (FUIConnectors.ContainsKey(ObjectID))
        {
            // FUIConnectors[ObjectID].Dispose();
            FUIConnectors.Remove(ObjectID);
        }
    }

    {#WEBCONNECTORS}

    {#UICONNECTORS}
}
}

{##WEBCONNECTOR}
/// web connector method call
[WebMethod(EnableSession = true)]
public {#RETURNTYPE} {#WEBCONNECTORCLASS}_{#UNIQUEMETHODNAME}({#PARAMETERDEFINITION})
{
    {#CHECKUSERMODULEPERMISSIONS}
    try
    {
        {#LOCALVARIABLES}
        {#LOCALRETURN}{#WEBCONNECTORCLASS}.{#METHODNAME}({#ACTUALPARAMETERS});
        {#RETURN}
    }
    catch (Exception e)
    {
        TLogging.Log(e.ToString());
        throw new Exception("Please check server log file");
    }
}

{##CHECKUSERMODULEPERMISSIONS}
TModuleAccessManager.CheckUserPermissionsForMethod(typeof({#CONNECTORWITHNAMESPACE}), "{#METHODNAME}", "{#PARAMETERTYPES}"{#LEDGERNUMBER});

{##UICONNECTORCONSTRUCTOR}
/// create a new UIConnector
[WebMethod(EnableSession = true)]
public System.String Create_{#UNIQUEMETHODNAME}({#PARAMETERDEFINITION})
{
    {#CHECKUSERMODULEPERMISSIONS}
    
    System.Guid ObjectID = Guid.NewGuid();
    FUIConnectors.Add(ObjectID.ToString() + " " + DomainManager.GClientID, new {#UICONNECTORCLASS}({#ACTUALPARAMETERS}));
    
    return ObjectID.ToString();
}

{##UICONNECTORMETHOD}
/// access a UIConnector method
[WebMethod(EnableSession = true)]
public {#RETURNTYPE} {#UICONNECTORCLASS}_{#UNIQUEMETHODNAME}(string UIConnectorObjectID{#PARAMETERDEFINITION})
{
    string ObjectID = UIConnectorObjectID + " " + DomainManager.GClientID;

    if (!FUIConnectors.ContainsKey(ObjectID))
    {
        TLogging.Log("Trying to call {#UICONNECTORCLASS}_{#METHODNAME}, but the object with this ObjectID " + ObjectID + " does not exist");
        throw new Exception("this object does not exist anymore!");
    }

    try
    {
        {#LOCALVARIABLES}
        {#LOCALRETURN}(({#UICONNECTORCLASS})FUIConnectors[ObjectID]).{#METHODNAME}({#ACTUALPARAMETERS});
        {#RETURN}
    }
    catch (Exception e)
    {
        TLogging.Log(e.ToString());
        throw new Exception("Please check server log file");
    }
}