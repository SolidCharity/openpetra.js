// Auto generated by nant generateGlue
// From a template at inc\template\src\ClientServerGlue\ClientGlue.cs
//
// Do not modify this file manually!
//
{#GPLFILEHEADER}

using System;
using System.Threading;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using Ict.Common;
using Ict.Common.Data;
using Ict.Common.Verification;
using Ict.Petra.Shared;
{#USINGNAMESPACES}

namespace Ict.Petra.Client.App.Core.RemoteObjects
{
    /// the top level namespace for the module {#TOPLEVELMODULE}
    public class TM{#TOPLEVELMODULE}Namespace
    {
        {#SUBNAMESPACEPROPERTIES}
        {#SUBNAMESPACECLASSES}
    }
}

{##SUBNAMESPACEPROPERTY}
private T{#NAMESPACENAME}Namespace F{#NAMESPACENAME}Namespace = new T{#NAMESPACENAME}Namespace();

/// <summary>The '{#SUBNAMESPACENAME}' subnamespace contains further subnamespaces.</summary>
public T{#NAMESPACENAME}Namespace {#OBJECTNAME}
{
    get
    {
        return F{#NAMESPACENAME}Namespace;
    }
}

{##NAMESPACECLASS}
/// <summary> namespace definition </summary>
public class T{#NAMESPACENAME}Namespace
{
    {#CONNECTORMETHODS}
    {#SUBNAMESPACEPROPERTIES}
    {#SUBNAMESPACECLASSES}
}

{##WEBCONNECTORMETHODREMOTE}
/// forward the method call
public {#RETURNTYPE} {#METHODNAME}({#PARAMETERDEFINITION})
{
    SortedList<string, object> ActualParameters = new SortedList<string, object>();
    {#ADDACTUALPARAMETERS}
    List<object> Result = THttpConnector.CallWebConnector("{#WEBCONNECTORCLASS}.{#METHODNAME}", ActualParameters, "{#EXPECTEDRETURNTYPE}");
    {#ASSIGNRESULTANDRETURN}
}

{##WEBCONNECTORMETHODSTANDALONE}
/// forward the method call
public {#RETURNTYPE} {#METHODNAME}({#PARAMETERDEFINITION})
{
    // TODO: check permissions
    {#RETURN}{#WEBCONNECTORCLASS}.{#METHODNAME}({#ACTUALPARAMETERS});
}

{##UICONNECTORMETHODREMOTE}
/// create an object on the server side
public {#UICONNECTORINTERFACE} {#METHODNAME}({#PARAMETERDEFINITION})
{
    return new {#UICONNECTORCLASSNAME}({#ACTUALPARAMETERS});
}

{#UICONNECTORCLASS}

{##UICONNECTORCLASS}
/// the implementation of the UIConnector for the client
public class {#UICONNECTORCLASSNAME}: {#UICONNECTORINTERFACE}
{
    private Guid FObjectID = null;

    {#CONSTRUCTORS}

    {#METHODSANDPROPERTIES}
}

{##UICONNECTORCONSTRUCTOR}
/// constructor, create the object on the server
public {#UICONNECTORCLASSNAME}({#PARAMETERDEFINITION})
{
    SortedList<string, object> ActualParameters = new SortedList<string, object>();
    {#ADDACTUALPARAMETERS}
    FObjectID = THttpConnector.CreateUIConnector("{#UICONNECTORCLASSNAME}", ActualParameters);
}

{##UICONNECTORMETHOD}
/// access the UIConnector Method
public {#RETURNTYPE} {#METHODNAME}({#PARAMETERDEFINITION})
{
    SortedList<string, object> ActualParameters = new SortedList<string, object>();
    {#ADDACTUALPARAMETERS}
    List<object> Result = THttpConnector.CallUIConnectorMethod(FObjectID, "{#UICONNECTORCLASSNAME}", "{#METHODNAME}", ActualParameters, "{#EXPECTEDRETURNTYPE}");
    {#ASSIGNRESULTANDRETURN}
}

{##UICONNECTORPROPERTY}
/// access the UIConnector Property
public {#TYPE} {#NAME}
{
{#IFDEF GETTER}
    get
    {
        return ({#TYPE}) THttpConnector.ReadUIConnectorProperty(FObjectID, "{#UICONNECTORCLASSNAME}", "{#NAME}", "{#EXPECTEDRETURNTYPE}");
    }
{#ENDIF GETTER}
{#IFDEF SETTER}
    set
    {
        SortedList<string, object> ActualParameters = new SortedList<string, object>();
        object Result = THttpConnector.WriteUIConnectorProperty(FObjectID, "{#UICONNECTORCLASSNAME}", "{#NAME}", ActualParameters, value);
    }
{#ENDIF SETTER}
}

{##UICONNECTORMETHODSTANDALONE}
/// forward the method call
public {#UICONNECTORINTERFACE} {#METHODNAME}({#PARAMETERDEFINITION})
{
    // TODO: check permissions
    return new {#UICONNECTORCLASS}({#ACTUALPARAMETERS});
}