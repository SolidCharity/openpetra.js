//
// DO NOT REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
//
// @Authors:
//       timop
//
// Copyright 2004-2012 by OM International
//
// This file is part of OpenPetra.org.
//
// OpenPetra.org is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// OpenPetra.org is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.
//
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Collections.Specialized;
using System.Windows.Forms;
using System.Data;
using System.Resources;
using System.Threading;
using GNU.Gettext;
using Ict.Common.Remoting.Client;
using Ict.Petra.Client.App.Core;
using Ict.Petra.Client.MReporting.Logic;
using Ict.Petra.Shared.MReporting;
using Ict.Common.Verification;
using SourceGrid;
using SourceGrid.Selection;
using System.IO;
using System.Diagnostics;
using Microsoft.Win32;
using Ict.Common;
using Ict.Petra.Client.CommonForms;
using Ict.Common.Controls;

namespace Ict.Petra.Client.MReporting.Gui
{
    /// <summary>
    /// useful functions for report screens
    /// </summary>
    public class TFrmPetraReportingUtils : TFrmPetraUtils
    {
        /// <summary>
        /// Delegate for call before LoadSettings is startin (for pre processing)
        /// </summary>
        public delegate void TDelegateLoadSettingsStarting();

        /// <summary>
        /// Delegate for call after LoadSettings is finished (for post processing)
        /// </summary>
        public delegate void TDelegateLoadSettingsFinished(TParameterList AParameters);

        /// <summary>
        /// Reference to the Delegate for call before LoadSettings is starting (for pre processing)
        /// </summary>
        private TDelegateLoadSettingsStarting FDelegateLoadSettingsStarting;

        /// <summary>
        /// Reference to the Delegate for call after LoadSettings is finished (for post processing)
        /// </summary>
        private TDelegateLoadSettingsFinished FDelegateLoadSettingsFinished;

        /// <summary>number of columns that can be sorted</summary>
        public const Int32 NUMBER_SORTBY = 3;

        /// <summary>we will not need resizing of form for forms that are generated by scaffolding</summary>
        protected Boolean FDontResizeForm;

        /// <summary>the name of the report; used to identify the directory where the settings are stored</summary>
        public string FReportName;

        /// <summary>name that should be in the menu; used for dynamically loading NRR reports</summary>
        protected string FMenuItemCaption;

        /// <summary>the name of the current settings, if they have been loaded or already saved under this name</summary>
        protected string FCurrentSettingsName;

        /// <summary>the CSV list of file names of xml files needed for this report</summary>
        public string FXMLFiles = string.Empty;

        /// <summary>the namespace, class name and method of the method that calculates the report. This is an alternative to the XMLFiles</summary>
        public string FCalculateFromMethod = string.Empty;

        /// <summary>you can specify the isolation level for the database transaction for the report. eg. serializable for extracts, repeatableread for finance, etc</summary>
        public string FIsolationLevel = string.Empty;

        /// <summary>the name of the report, as it is used in the xml file</summary>
        public string FCurrentReport;

        /// <summary>the name of the sub directory where the settings are stored</summary>
        public string FSettingsDirectory;

        /// <summary>Indicator if the output of the columns should be wrapped or cut of if the text
        /// doesn't fit in the width of the column </summary>
        public bool FWrapColumn;

        /// <summary>to be able to add the currently loaded settings name to the caption of the window.</summary>
        protected string FWindowCaption;

        /// <summary>this System.Object manages the stored settings of the current user and current report</summary>
        protected TStoredSettings FStoredSettings;

        /// <summary>the System.Object that is able to deal with all the parameters, and can calculate a report</summary>
        protected TRptCalculator FCalculator;

        /// <summary>this shows which column is currently selected; it is 1 if no column is selected</summary>
        protected int FSelectedColumn;

        /// <summary>holds the number of visible columns. This value is usually set from UC_PartnerColumns </summary>
        public int FMaxDisplayColumns;

        /// <summary>List of functions between columns, that are available for this report; is set by SetAvailableFunctions</summary>
        protected ArrayList FAvailableFunctions;

        /// <summary>list of verification results; ReadControls should add all errors to this list; ReadControlsWithErrorHandling will tell the user</summary>
        protected TVerificationResultCollection FVerificationResults;

        /// <summary>This is the thread used to generate the report; that way, the status bar is always updated, and the window does never turn blank</summary>
        protected Thread FGenerateReportThread;

        /// <summary>This is the thread used to generate the extract; that way, the status bar is always updated, and the window does never turn blank</summary>
        protected Thread FGenerateExtractThread;

        /// <summary>the path where the application is started from.</summary>
        public static string FApplicationDirectory;

        /// <summary>
        /// constructor
        /// </summary>
        /// <param name="AParentForm">the form that has opened this window; needed for focusing when this window is closed later</param>
        /// <param name="ATheForm"></param>
        /// <param name="AStatusBar"></param>
        public TFrmPetraReportingUtils(Form AParentForm, IFrmPetra ATheForm,
            TExtStatusBarHelp AStatusBar) : base(AParentForm,
                                                (IFrmPetra)ATheForm,
                                                AStatusBar)
        {
            FCurrentSettingsName = "";
            FSelectedColumn = -1;
            FAvailableFunctions = null;
            FGenerateReportThread = null;
            FGenerateExtractThread = null;
            FDontResizeForm = false;
            FDelegateLoadSettingsStarting = null;
            FDelegateLoadSettingsFinished = null;
        }

        /// set caption of window, used to build window title
        public string WindowCaption
        {
            set
            {
                FWindowCaption = value;
            }
        }

        /// <summary>
        /// This property is used to provide a function which is called at the start of LoadSettings
        /// </summary>
        /// <description>The Delegate is set before LoadSettings is called or not at all if no pre processing is needed.</description>
        public TDelegateLoadSettingsStarting DelegateLoadSettingsStarting
        {
            set
            {
                FDelegateLoadSettingsStarting = value;
            }
        }

        /// <summary>
        /// This property is used to provide a function which is called after LoadSettings
        /// </summary>
        /// <description>The Delegate is set before LoadSettings is called or not at all if no post processing is needed.</description>
        public TDelegateLoadSettingsFinished DelegateLoadSettingsFinished
        {
            set
            {
                FDelegateLoadSettingsFinished = value;
            }
        }

        /// <summary>
        /// returns the string that is to be displayed in the menuitem
        /// that is mainly used for dynamically loaded nrr reports
        ///
        /// </summary>
        /// <returns>void</returns>
        public string GetMenuItemCaption()
        {
            return FMenuItemCaption;
        }

        /// <summary>
        /// This function is supposed to test if the current user has access to all the needed modules
        /// This method describes, which permissions are needed for this specific report.
        /// </summary>
        /// <returns>true if the current user is allowed to use this report
        /// </returns>
        public virtual bool HasSufficientPermissions()
        {
            return true;
        }

        /// <summary>
        /// Event Handler that is invoked when the Form is about to close - no matter
        /// how the closing was invoked (by calling Form.Close, a Close button, the
        /// x Button of a Form, etc).
        /// </summary>
        /// <param name="sender">Event sender</param>
        /// <param name="e">EventArgs that allow cancelling of the closing</param>
        public override void TFrmPetra_Closing(System.Object sender, System.ComponentModel.CancelEventArgs e)
        {
            FStoredSettings.SaveWrapOption(FWrapColumn);
            base.TFrmPetra_Closing(sender, e);
        }

#if TODO
        private void BtnCSVDestination_Click(System.Object sender, System.EventArgs e)
        {
            if (SaveFileDialogCSV.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                txtCSVDestination.Text = SaveFileDialogCSV.FileName;
            }
        }

        private void TFrmReporting_KeyUp(System.Object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if (e.Alt == true)
            {
                switch (e.KeyCode)
                {
                    case Keys.G:
                        MI_GenerateReport_Click(sender, e);
                        break;

                    case Keys.E:
                        MI_GenerateExtract_Click(sender, e);
                        break;

                    case Keys.S:
                        MI_SaveSettings_Click(sender, e);
                        break;

                    case Keys.A:
                        MI_SaveSettingsAs_Click(sender, e);
                        break;

                    case Keys.L:
                        MI_LoadSettingsDialog_Click(sender, e);
                        break;

                    case Keys.C:
                        MniFile_Click(mniFileClose, e);
                        break;
                }
            }
        }
#endif



        #region Screen Initialisation

        /// <summary>
        /// setup the form
        ///
        /// </summary>
        /// <param name="AReportParameter"></param>
        /// <returns>false if there are not enough permissions
        /// </returns>
        public virtual bool InitialiseData(String AReportParameter)
        {
            bool ReturnValue = true;

            if (!HasSufficientPermissions())
            {
                MessageBox.Show("You don't have enough permissions for this report");
                return false;
            }

            this.FCalculator = new TRptCalculator();

            FWindowCaption = FWinForm.Text;

            InitialiseStoredSettings(FReportName);

            FSelectedColumn = -1;

            SetAvailableFunctions();

            return ReturnValue;
        }

        /// <summary>
        /// initialize stored settings
        ///
        /// </summary>
        /// <param name="AReportName"></param>
        /// <returns>
        /// </returns>
        public void InitialiseStoredSettings(String AReportName)
        {
            FReportName = AReportName;
            string SettingsDirectory = TClientSettings.ReportingPathReportSettings +
                                       System.IO.Path.DirectorySeparatorChar + this.FSettingsDirectory;
            string UserSettingsDirectory = TClientSettings.ReportingPathReportUserSettings +
                                           System.IO.Path.DirectorySeparatorChar + this.FSettingsDirectory;
            this.FStoredSettings = new TStoredSettings(FReportName, SettingsDirectory, UserSettingsDirectory);
            UpdateLoadingMenu(this.FStoredSettings.GetRecentlyUsedSettings());

            FWrapColumn = FStoredSettings.GetWrapOption();
            ((IFrmReporting)FTheForm).CheckWrapColumnMenuItem(FWrapColumn);
        }

        #endregion


        /// <summary>
        /// Determines whether the window can be closed.
        /// It can be used e.g. if something is still edited.
        /// </summary>
        /// <returns>true if window can be closed
        /// </returns>
        public new bool CanClose()
        {
            bool ReturnValue = true;

#if TODO
            System.Windows.Forms.DialogResult answer;
            ReturnValue = base.CanClose();

            if ((FGenerateReportThread != null) && FGenerateReportThread.IsAlive)
            {
                ReturnValue = false;
                answer = MessageBox.Show("A report is being calculated at the moment. " + Environment.NewLine + "Do you want to cancel the report?",
                    "Cancel Report?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question,
                    MessageBoxDefaultButton.Button1);

                if (answer == System.Windows.Forms.DialogResult.Yes)
                {
                    FCalculator.CancelReportCalculation();
                    ReturnValue = true;
                }
            }

            if ((FGenerateExtractThread != null) && FGenerateExtractThread.IsAlive)
            {
                ReturnValue = false;
                answer = MessageBox.Show(
                    "An extract is being calculated at the moment. " + Environment.NewLine + "Do you want to cancel the extract?",
                    "Cancel Extract?",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Question,
                    MessageBoxDefaultButton.Button1);

                if (answer == System.Windows.Forms.DialogResult.Yes)
                {
                    //TODO FCalculator.CancelExtractCalculation();
                    ReturnValue = true;
                }
            }

            // has anything changed in the currently selected column?
            if (ColumnChanged(FSelectedColumn))
            {
                MessageBox.Show(
                    "Window cannot be closed." + Environment.NewLine + "Please first apply the changes to the current column, " +
                    Environment.NewLine +
                    "or cancel the changes.",
                    "Column changed");
                ReturnValue = false;
            }

            if (ReturnValue == true)
            {
                if (this.Owner != null)
                {
                    this.Owner.Focus();
                }
            }
#endif
            return ReturnValue;
        }

        /// <summary>
        /// Generate a report, called by menu item or toolbar button.
        /// Can also cancel a currently running report thread.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_GenerateReport_Click(System.Object sender, System.EventArgs e)
        {
            if ((FGenerateReportThread != null) && FGenerateReportThread.IsAlive)
            {
                // Cancel the report
                FCalculator.CancelReportCalculation();
                return;
            }

#if TODO
            // has anything changed in the currently selected column?
            if (ColumnChanged(FSelectedColumn))
            {
                MessageBox.Show(
                    "Report cannot be generated." + Environment.NewLine + "Please first apply the changes to the current column, " +
                    Environment.NewLine +
                    "or cancel the changes.",
                    "Column changed");
                return;
            }
            else
            {
                SelectColumn(-1);
            }
#endif

            // read the settings and parameters from the controls
            if (!ReadControlsWithErrorHandling(TReportActionEnum.raGenerate))
            {
                return;
            }

            if (TClientSettings.DebugLevel >= TClientSettings.DEBUGLEVEL_REPORTINGDATA)
            {
                FCalculator.GetParameters().Save(TClientSettings.PathLog + Path.DirectorySeparatorChar + "debugParameter.xml", true);
            }

            this.FWinForm.Cursor = Cursors.WaitCursor;
            TLogging.SetStatusBarProcedure(this.WriteToStatusBar);

            if ((FGenerateReportThread == null) || (!FGenerateReportThread.IsAlive))
            {
                ((IFrmReporting) this.FTheForm).EnableBusy(true);
                FGenerateReportThread = new Thread(GenerateReport);
                FGenerateReportThread.IsBackground = true;
                FGenerateReportThread.Start();
            }
        }

        /// <summary>
        /// Generate an extract
        /// </summary>
        public void MI_GenerateExtract_Click(System.Object sender, System.EventArgs e)
        {
            if ((FGenerateExtractThread != null) && FGenerateExtractThread.IsAlive)
            {
                // cancel the extract
                //TODO FCalculator.CancelExtractCalculation();
                return;
            }

            // open dialog to prompt the user to enter a name for new extract
            TFrmExtractNamingDialog ExtractNameDialog = new TFrmExtractNamingDialog(this.FWinForm);
            string ExtractName;
            string ExtractDescription;

            ExtractNameDialog.ShowDialog();

            if (ExtractNameDialog.DialogResult != System.Windows.Forms.DialogResult.Cancel)
            {
                /* Get values from the Dialog */
                ExtractNameDialog.GetReturnedParameters(out ExtractName, out ExtractDescription);
            }
            else
            {
                // dialog was cancelled, do not continue with extract generation
                return;
            }

            ExtractNameDialog.Dispose();

            // read the settings and parameters from the controls
            if (!ReadControlsWithErrorHandling(TReportActionEnum.raGenerate))
            {
                return;
            }

            // add extract name and description to parameter list
            // (don't add it earlier as the list gets cleared while reading controls from screens)
            FCalculator.AddParameter("param_extract_name", ExtractName);
            FCalculator.AddParameter("param_extract_description", ExtractDescription);

            if (TClientSettings.DebugLevel >= TClientSettings.DEBUGLEVEL_REPORTINGDATA)
            {
                FCalculator.GetParameters().Save(TClientSettings.PathLog + Path.DirectorySeparatorChar + "debugParameter.xml", true);
            }

            this.FWinForm.Cursor = Cursors.WaitCursor;
            TLogging.SetStatusBarProcedure(this.WriteToStatusBar);

            if ((FGenerateExtractThread == null) || (!FGenerateExtractThread.IsAlive))
            {
                ((IFrmReporting) this.FTheForm).EnableBusy(true);
                FGenerateExtractThread = new Thread(GenerateExtract);
                FGenerateExtractThread.IsBackground = true;
                FGenerateExtractThread.Start();
            }
        }

        /// <summary>
        /// Toggle the option to wrap a column in the report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_WrapColumn_Click(System.Object sender, System.EventArgs e)
        {
            System.Windows.Forms.ToolStripMenuItem WrapMenuItem = (System.Windows.Forms.ToolStripMenuItem)sender;

            WrapMenuItem.Checked = !WrapMenuItem.Checked;

            FWrapColumn = WrapMenuItem.Checked;
        }

        /// <summary>
        /// Reads path of default browser from registry - apparently no-one is calling this!
        /// </summary>
        /// <returns>void</returns>
        public static string GetDefaultBrowserPath()
        {
            const String key = "htmlfile\\shell\\open\\command";
            RegistryKey regKey;
            string s;
            string delim;

            regKey = Registry.ClassesRoot.OpenSubKey(key, false);

            // get default browser path
            // see http:www.novell.com/coolsolutions/tip/11537.html; it seems FireFox does not change that registry setting
            s = regKey.GetValue(null, null).ToString();
            delim = "\"";
            return s.Split(delim.ToCharArray())[1];
        }

        /// <summary>
        /// This can be used directly by external functions that need to generate
        /// a report without first showing the UI for it. See method CreateReportNoGui in AP_PaymentReport.ManualCode.cs
        /// </summary>
        /// <param name="ACalculator">This must be set up already</param>
        /// <param name="ACallerForm">Parent Form</param>
        /// <param name="AReportName"></param>
        /// <param name="AWrapColumn"></param>
        public static void GenerateReport(TRptCalculator ACalculator, Form ACallerForm, String AReportName, bool AWrapColumn)
        {
            try
            {
                if (ACalculator.GenerateResultRemoteClient())
                {
                    TMyUpdateDelegate myDelegate = @ReportCalculationSuccess;
                    ACallerForm.Invoke((System.Delegate) new TMyUpdateDelegate(
                            myDelegate), new object[] { ACalculator, ACallerForm, AReportName, AWrapColumn });
                }
            }
            catch (Exception e)
            {
                {
                    MessageBox.Show(e.ToString());
                }
            }
        }

        delegate void CrossThreadUpdate ();

        void UpdateParentFormEndOfReport()
        {
            if (FWinForm.InvokeRequired)
            {
                FWinForm.Invoke(new CrossThreadUpdate(UpdateParentFormEndOfReport));
            }
            else
            {
                FWinForm.Cursor = Cursors.Default;
                ((IFrmReporting) this.FTheForm).EnableBusy(false);
            }
        }

        /// <summary>
        /// This procedure does the calculation of the report and provides error messages. It is called in a new thread, by MI_GenerateReport_Click.
        /// I'm just going to call the static version, above.
        /// </summary>
        /// <returns>void</returns>
        private void GenerateReport()
        {
            GenerateReport(FCalculator, FWinForm, FReportName, FWrapColumn);
            UpdateParentFormEndOfReport();
        }

        /// <summary>
        /// This procedure does the calculation of the extract, and provides error messages.
        /// It is called in a new thread, by MI_GenerateExtract_Click
        /// </summary>
        /// <returns>void</returns>
        private void GenerateExtract()
        {
            // Extracts are not calculated in the default way but another method must be declared,
            // so make this known to the calculator
            if (FCalculateFromMethod.Length > 0)
            {
                FCalculator.AddParameter("calculateFromMethod", FCalculateFromMethod);
            }

            // At the moment triggers the same procedure as generating a report
            FCalculator.CalculatesExtract = true;
            GenerateReport();
        }

        /// <summary>
        /// Called at the end of GenerateReport
        /// (This was previously "protected", so that might give me some problem...)
        /// </summary>
        /// <param name="Calculator"></param>
        /// <param name="ACallerForm"></param>
        /// <param name="AReportName"></param>
        /// <param name="AWrapColumn"></param>
        public static void ReportCalculationSuccess(TRptCalculator Calculator, Form ACallerForm, String AReportName, bool AWrapColumn)
        {
            if (TClientSettings.DebugLevel >= TClientSettings.DEBUGLEVEL_REPORTINGDATA)
            {
                Calculator.GetParameters().Save(TClientSettings.PathLog + Path.DirectorySeparatorChar + "debugParameterReturn.xml", true);
                Calculator.GetResults().WriteCSV(
                    Calculator.GetParameters(), TClientSettings.PathLog + Path.DirectorySeparatorChar + "debugResultReturn.csv");
            }

            if (Calculator.GetParameters().Exists("SaveCSVFilename")
                && (Calculator.GetParameters().Get("SaveCSVFilename").ToString().Length > 0))
            {
                Calculator.GetResults().WriteCSV(Calculator.GetParameters(), Calculator.GetParameters().Get("SaveCSVFilename").ToString());
            }

            if (!Calculator.CalculatesExtract)
            {
                // this only needs to be considered when running reports
                if (Calculator.GetParameters().GetOrDefault("OnlySaveCSV", -1, new TVariant(false)).ToBool() == false)
                {
                    PreviewReport(Calculator, ACallerForm, AReportName, AWrapColumn);
                }
            }
        }

        /// <summary>
        /// Called after the calculation of the report has been finished.
        /// Converted to static so that it can be called from the static GenerateReport
        /// </summary>
        /// <param name="Calculator"></param>
        /// <param name="ACallerForm"></param>
        /// <param name="AReportName"></param>
        /// <param name="AWrapColumn"></param>
        public static void PreviewReport(TRptCalculator Calculator, Form ACallerForm, String AReportName, bool AWrapColumn)
        {
            // Create a print window with all kinds of output options
            TFrmPrintPreview printWindow = new TFrmPrintPreview(ACallerForm, AReportName, Calculator.GetDuration(),
                Calculator.GetResults(), Calculator.GetParameters(), AWrapColumn);

            ACallerForm.AddOwnedForm(printWindow);
            printWindow.Owner = ACallerForm;

// TODO     printWindow.SetPrintChartProcedure(GenerateChart);
            printWindow.ShowDialog();
        }

        #region Manage Settings

        /// <summary>
        /// This procedure loads the available saved settings into the Load menu
        ///
        /// </summary>
        protected void UpdateLoadingMenu(StringCollection ARecentlyUsedSettings)
        {
            for (System.Int32 Counter = 0; Counter <= ARecentlyUsedSettings.Count - 1; Counter++)
            {
                ToolStripItem mniItem, tbbItem;

                if (((IFrmReporting)FTheForm).GetRecentSettingsItems(Counter, out mniItem, out tbbItem))
                {
                    mniItem.Text = ARecentlyUsedSettings[Counter];

                    // TODO tbbItem.Text = ARecentlyUsedSettings[Counter];
                    mniItem.Visible = true;

                    // TODO tbbItem.Visible = true;
                }
            }

            for (System.Int32 Counter = ARecentlyUsedSettings.Count; true; Counter++)
            {
                ToolStripItem mniItem, tbbItem;

                if (((IFrmReporting)FTheForm).GetRecentSettingsItems(Counter, out mniItem, out tbbItem))
                {
                    mniItem.Visible = false;

                    // TODO tbbItem.Visible = false;
                }
                else
                {
                    break;
                }
            }
        }

        /// backup of recently loaded parameters from file. can contain information that is not available on the GUI (yet)
        private TParameterList FParametersFromFile = new TParameterList();

        /// <summary>
        /// This procedure loads the parameters of the given settings
        /// </summary>
        protected void LoadSettings(String ASettingsName)
        {
            // call the delegate for pre processing if needed
            if (FDelegateLoadSettingsStarting != null)
            {
                FDelegateLoadSettingsStarting();
            }

            FParametersFromFile = new TParameterList();

            FCurrentSettingsName = ASettingsName;
            StringCollection RecentlyUsedSettings = FStoredSettings.LoadSettings(ref FCurrentSettingsName, ref FParametersFromFile);

            // set the title of the window
            if (FCurrentSettingsName.Length > 0)
            {
                FWinForm.Text = FWindowCaption + ": " + FCurrentSettingsName;
            }
            else
            {
                FWinForm.Text = FWindowCaption;
            }

            SetControls(FParametersFromFile);
            UpdateLoadingMenu(RecentlyUsedSettings);

            // now call the delegate for post processing if needed
            if (FDelegateLoadSettingsFinished != null)
            {
                FDelegateLoadSettingsFinished(FParametersFromFile);
            }
        }

        /// <summary>
        /// This procedure loads the parameters of the default settings;
        /// at the moment this is implemented to use the last used settings
        ///
        /// </summary>
        public void LoadDefaultSettings()
        {
            StringCollection RecentlyUsedSettings;

            RecentlyUsedSettings = FStoredSettings.GetRecentlyUsedSettings();

            if (RecentlyUsedSettings.Count > 0)
            {
                LoadSettings(RecentlyUsedSettings[0]);
            }
        }

        /// <summary>
        /// has anything changed in the currently selected column?
        /// if yes, show error message; telling the user to save changes first
        /// </summary>
        /// <returns>true if column has changed and error message was displayed</returns>
        private bool ColumnChangedWithErrorMessage(string AFailedAction)
        {
#if TODO
            if (ColumnChanged(FSelectedColumn))
            {
                MessageBox.Show(
                    AFailedAction + "." + Environment.NewLine + "Please first apply the changes to the current column, " +
                    Environment.NewLine +
                    "or cancel the changes.",
                    "Column changed");
                return true;
            }
            else
            {
                SelectColumn(-1);
            }
#endif
            return false;
        }

        /// <summary>
        /// show a dialog with all available stored settings for this report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_LoadSettingsDialog_Click(System.Object sender, System.EventArgs e)
        {
            if (ColumnChangedWithErrorMessage(Catalog.GetString("Settings cannot be loaded")))
            {
                return;
            }

            TFrmSettingsLoad SettingsDialog = new TFrmSettingsLoad(FStoredSettings);

            if (SettingsDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                LoadSettings(SettingsDialog.GetNewName());
            }
        }

        /// <summary>
        /// load settings from menu, recently used settings
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_LoadSettings_Click(System.Object sender, System.EventArgs e)
        {
            if (ColumnChangedWithErrorMessage(Catalog.GetString("Settings cannot be loaded")))
            {
                return;
            }

            ToolStripItem ctrl = (ToolStripItem)sender;

            if (ctrl.Name.Substring(3).StartsWith("LoadSettings")
                && !ctrl.Name.Contains("LoadSettingsDialog")
                && !ctrl.Name.EndsWith("LoadSettings"))
            {
                LoadSettings(ctrl.Text);
            }
        }

        /// <summary>
        /// save report settings with a new name
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_SaveSettingsAs_Click(System.Object sender, System.EventArgs e)
        {
            if (ColumnChangedWithErrorMessage(Catalog.GetString("Settings cannot be saved")))
            {
                return;
            }

            // read the settings and parameters from the controls
            if (!ReadControlsWithErrorHandling(TReportActionEnum.raSave))
            {
                return;
            }

            if (FCurrentSettingsName == "")
            {
                FCurrentSettingsName = FCurrentReport;
            }

            TFrmSettingsSave SettingsDialog = new TFrmSettingsSave(FStoredSettings, FCurrentSettingsName);

            if (SettingsDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                StringCollection RecentlyUsedSettings = null;

                FCurrentSettingsName = SettingsDialog.GetNewName();

                // set the title of the window
                FWinForm.Text = FWindowCaption + ": " + FCurrentSettingsName;
                try
                {
                    RecentlyUsedSettings = this.FStoredSettings.SaveSettings(FCurrentSettingsName, FCalculator.GetParameters());
                }
                catch (Exception)
                {
                    MessageBox.Show("Not a valid name. Please use letters numbers and underscores etc, values not saved");
                    FWinForm.Text = FWindowCaption + ": Not a valid name, values not saved!";
                }

                if (RecentlyUsedSettings != null)
                {
                    UpdateLoadingMenu(RecentlyUsedSettings);
                }
            }
        }

        /// <summary>
        /// save report settings; if those are the system default settings, the user still has to enter a new name
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_SaveSettings_Click(System.Object sender, System.EventArgs e)
        {
            if (ColumnChangedWithErrorMessage(Catalog.GetString("Settings cannot be saved")))
            {
                return;
            }

            if ((FCurrentSettingsName.Length == 0) || (FStoredSettings.IsSystemSettings(FCurrentSettingsName)))
            {
                MI_SaveSettingsAs_Click(sender, e);
            }
            else
            {
                // read the settings and parameters from the controls
                if (!ReadControlsWithErrorHandling(TReportActionEnum.raSave))
                {
                    return;
                }

                StringCollection RecentlyUsedSettings = this.FStoredSettings.SaveSettings(FCurrentSettingsName, FCalculator.GetParameters());

                if (RecentlyUsedSettings != null)
                {
                    UpdateLoadingMenu(RecentlyUsedSettings);
                }
            }
        }

        /// <summary>
        /// maintain existing report settings (rename, delete)
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void MI_MaintainSettings_Click(System.Object sender, System.EventArgs e)
        {
            TFrmSettingsMaintain SettingsDialog;

            SettingsDialog = new TFrmSettingsMaintain(FStoredSettings);
            SettingsDialog.ShowDialog();
            UpdateLoadingMenu(this.FStoredSettings.GetRecentlyUsedSettings());
        }

        #endregion

        #region Parameter/Settings Handling

        /// <summary>
        /// to be called from outside
        /// </summary>
        /// <returns>true if successful
        /// </returns>
        protected virtual bool ReadControlsWithErrorHandling(TReportActionEnum AReportAction)
        {
            bool ReturnValue;
            TVerificationResult VerificationResultEntry;

            System.Collections.IEnumerator VerificationResultEnum;
            String UserMessage;
            ReturnValue = false;
            try
            {
                FVerificationResults = new TVerificationResultCollection();
                ReadControls(AReportAction); // Overridden versions of this method may add verification results.

                if (FVerificationResults.Count != 0)
                {
                    UserMessage = "Report could not be generated." + Environment.NewLine + Environment.NewLine + "Reasons:" + Environment.NewLine +
                                  Environment.NewLine;
                    VerificationResultEnum = FVerificationResults.GetEnumerator();

                    while (VerificationResultEnum.MoveNext())
                    {
                        VerificationResultEntry = ((TVerificationResult)VerificationResultEnum.Current);

                        if (VerificationResultEntry.ResultContext.ToString().Length > 0)
                        {
                            UserMessage = UserMessage + "  * [" + VerificationResultEntry.ResultContext + "] ";
                        }
                        else
                        {
                            UserMessage = UserMessage + "  * ";
                        }

                        UserMessage = UserMessage + VerificationResultEntry.ResultText + Environment.NewLine + Environment.NewLine;
                    }

                    MessageBox.Show(UserMessage, "Error");
                }
                else
                {
                    ReturnValue = true;
                }
            }
            catch (Exception e)
            {
                TLogging.Log(e.ToString());

                if (TLogging.DebugLevel >= TLogging.DEBUGLEVEL_REPORTING)
                {
                    MessageBox.Show(e.ToString(), "DEBUG: Invalid Selection");

                    // todo: use the verification tools from Christian
                    MessageBox.Show(e.Message, "Invalid Selection");
                }
            }
            return ReturnValue;
        }

        /// <summary>
        /// Set up the calculator with the initial parameters that everyone needs
        /// </summary>
        /// <param name="ACalculator"></param>
        /// <param name="AXMLFiles"></param>
        /// <param name="AIsolationLevel"></param>
        /// <param name="ACurrentReport"></param>
        public static void InitialiseCalculator(TRptCalculator ACalculator, string AXMLFiles, string AIsolationLevel, string ACurrentReport)
        {
            ACalculator.ResetParameters();

            if (AXMLFiles.Length > 0)
            {
                ACalculator.AddParameter("xmlfiles", AXMLFiles);
            }

            if (AIsolationLevel.Length > 0)
            {
                ACalculator.AddParameter("IsolationLevel", AIsolationLevel);
            }

            ACalculator.AddParameter("currentReport", ACurrentReport);
        }

        /// <summary>
        /// Reads the selected values from the controls,
        /// and stores them into the parameter system of FCalculator
        /// </summary>
        /// <returns>void</returns>
        public virtual void ReadControls(TReportActionEnum AReportAction)
        {
            InitialiseCalculator(FCalculator, FXMLFiles, FIsolationLevel, FCurrentReport);
            ((IFrmReporting) this.FTheForm).ReadControls(FCalculator, AReportAction);

            TParameterList CurrentParameters = FCalculator.GetParameters();

            // if the current parameters don't have any columns, but the backup list has, copy all columns
            if ((CurrentParameters.Get("MaxDisplayColumns").ToInt32() == 0) && (FParametersFromFile.Get("MaxDisplayColumns").ToInt32() > 0))
            {
                int MaxColumns = FParametersFromFile.Get("MaxDisplayColumns").ToInt32();
                CurrentParameters.Add("MaxDisplayColumns", MaxColumns);

                for (int ColumnCounter = 0; ColumnCounter < MaxColumns; ColumnCounter++)
                {
                    CurrentParameters.Copy(FParametersFromFile, ColumnCounter, -1, eParameterFit.eExact, ColumnCounter);
                }
            }

            // add all parameters that do not have an equivalent in the parameter list received from the GUI
            CurrentParameters.CopyMissing(FParametersFromFile);
        }

        /// <summary>
        /// Sets the selected values in the controls, using the parameters loaded from a file
        ///
        /// </summary>
        /// <returns>void</returns>
        public virtual void SetControls(TParameterList AParameters)
        {
            // TODO

            ((IFrmReporting) this.FTheForm).SetControls(AParameters);
        }

        /// add a verification result
        public virtual void AddVerificationResult(TVerificationResult AVerificationResult)
        {
            FVerificationResults.Add(AVerificationResult);
        }

        /// count the verification results
        public virtual int GetVerificationResultCount()
        {
            return FVerificationResults.Count;
        }

        #endregion

        #region Column Functions and Calculations

        /// <summary>
        /// Add an item to the fields that can be selected in the report
        /// </summary>
        /// <param name="AName">Name of the field</param>
        public void AddAvailableFunction(String AName)
        {
            FAvailableFunctions.Add(new TColumnFunction(AName));
        }

        /// <summary>
        /// Add an item to the fields that can be selected in the report
        /// </summary>
        /// <param name="AFunction">The function to add</param>
        public void AddAvailableFunction(TColumnFunction AFunction)
        {
            FAvailableFunctions.Add(AFunction);
        }

        /// <summary>
        /// This will return the available functions
        /// </summary>
        /// <returns></returns>
        public ArrayList GetAvailableFunctions()
        {
            return FAvailableFunctions;
        }

        /// <summary>
        /// This will return a string list of available functions
        ///
        /// </summary>
        /// <returns>void</returns>
        public StringCollection GetAvailableFunctionsStringList()
        {
            StringCollection ReturnValue;

            ReturnValue = new StringCollection();

            foreach (TColumnFunction colfunc in FAvailableFunctions)
            {
                ReturnValue.Add(colfunc.GetDisplayValue());
            }

            return ReturnValue;
        }

        /// <summary>
        /// Remove an advertised function;
        /// that is necessary for some of the derived reports;
        /// e.g. on the monthly reports you don't want to see a "Actual End of Year"
        ///
        /// </summary>
        /// <returns>void</returns>
        protected void RemoveAvailableFunction(String AName)
        {
            foreach (TColumnFunction colfunc in FAvailableFunctions)
            {
                if (colfunc.GetDisplayValue() == AName)
                {
                    FAvailableFunctions.Remove(colfunc);
                    return;
                }
            }
        }

        /// <summary>
        /// This will add functions to the list of available functions
        ///
        /// </summary>
        /// <returns>void</returns>
        protected virtual void SetAvailableFunctions()
        {
            FAvailableFunctions = new ArrayList();
        }

        /// <summary>
        /// get the function System.Object of the given calculation string
        /// </summary>
        /// <returns>nil if the function cannot be found
        /// </returns>
        protected TColumnFunction GetFunction(String calculation)
        {
            if (FAvailableFunctions != null)
            {
                foreach (TColumnFunction Func in FAvailableFunctions)
                {
                    if (Func.GetDisplayValue() == calculation)
                    {
                        return Func;
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// todoComment
        /// </summary>
        /// <param name="AParameterList"></param>
        /// <param name="ACalculationName"></param>
        /// <param name="AColumnNr"></param>
        /// <returns></returns>
        protected TColumnFunction GetFunction(TParameterList AParameterList, String ACalculationName, System.Int32 AColumnNr)
        {
            TColumnFunction ReturnValue = null;

            ReturnValue = GetFunction(ACalculationName);

            if (ReturnValue == null)
            {
                // this might be a general function that has a parameter, that is displayed
                if (FAvailableFunctions != null)
                {
                    foreach (TColumnFunction Func in FAvailableFunctions)
                    {
                        if (Func.FDescription == ACalculationName)
                        {
                            // found an entry with e.g. DataLabelColumn
                            // now need to check if this columns FCalculationParameterValue is used
                            if (AParameterList.Get(Func.FCalculationParameterName, AColumnNr).ToString() == Func.FCalculationParameterValue)
                            {
                                return Func;
                            }
                        }
                    }
                }
            }

            return ReturnValue;
        }

        #endregion
    }

    /// <summary>
    /// This class contains all information needed to specify a function for 2 columns,
    /// or a function that is applied to one column;
    /// once it is created and added to a TFrmReporting System.Object, in one of its derived SetAvailableFunctions() Methods,
    /// it will be available in the comboboxes.
    ///
    /// </summary>
    public class TColumnFunction : IComparable
    {
        /// <summary>the name of the function, e.g. Variance</summary>
        public String FDescription;

        /// <summary>number of columns involved, e.g 1 or 2</summary>
        public System.Int32 FNumberColumns;

        /// <summary>e.g. param_label; name that the parameter should be stored under</summary>
        public String FCalculationParameterName;

        /// <summary>e.g.: Regional Director; This will be displayed</summary>
        public String FCalculationParameterValue;

        /// <summary>
        /// Initialisation
        /// </summary>
        public static void InitializeUnit()
        {
            TFrmPetraReportingUtils.FApplicationDirectory = Environment.CurrentDirectory;
        }

        #region TColumnFunction Implementation

        /// <summary>
        /// todo: add column default width for personnel reports? }
        /// constructor used for functions between columns
        ///
        /// </summary>
        /// <returns>void</returns>
        public TColumnFunction(String ADescription, System.Int32 ANumberColumns)
        {
            FDescription = ADescription;
            FNumberColumns = ANumberColumns;
            FCalculationParameterName = "";
            FCalculationParameterValue = "";
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription">Name of the field</param>
        public TColumnFunction(String ADescription)
        {
            FDescription = ADescription;
            FNumberColumns = 0;
            FCalculationParameterName = "";
            FCalculationParameterValue = "";
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription">Name of the field</param>
        /// <param name="ACalculationParameterName">Name of the report header</param>
        /// <param name="ACalculationParameterValue">Name of the variable during report calculation</param>
        public TColumnFunction(String ADescription, String ACalculationParameterName, String ACalculationParameterValue)
        {
            FNumberColumns = 0;
            FDescription = ADescription;
            FCalculationParameterName = ACalculationParameterName;
            FCalculationParameterValue = ACalculationParameterValue;
        }

        /// <summary>
        /// Returns the name of the field
        /// </summary>
        /// <returns></returns>
        public String GetDisplayValue()
        {
            String ReturnValue;

            ReturnValue = FDescription;

            if (FCalculationParameterValue != "")
            {
                ReturnValue = FCalculationParameterValue;
            }

            return ReturnValue;
        }

        int IComparable.CompareTo(object obj)
        {
            TColumnFunction tmp = (TColumnFunction)obj;

            return String.Compare(this.FDescription, tmp.FDescription);
        }

        #endregion
    }

    /// <summary>
    /// Column function for partner module
    /// </summary>
    public class TPartnerColumnFunction : TColumnFunction
    {
        /// <summary>Default width of the column in cm e.g 1.5 </summary>
        public double FColumnWidth;

        /// <summary>
        /// constructor used for functions between columns
        ///
        /// </summary>
        /// <returns>void</returns>
        public TPartnerColumnFunction(String ADescription, double AColumnWidth, System.Int32 ANumberColumns) :
            base(ADescription, ANumberColumns)
        {
            FColumnWidth = AColumnWidth;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription">Name of the field</param>
        public TPartnerColumnFunction(String ADescription) : base(ADescription)
        {
            FColumnWidth = 2.0;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription">Name of the field</param>
        /// <param name="AColumnWidth">Default width</param>
        public TPartnerColumnFunction(String ADescription, double AColumnWidth) : base(ADescription)
        {
            FColumnWidth = AColumnWidth;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription">Name of the field</param>
        /// <param name="ACalculationParameterName">Name of the report header</param>
        /// <param name="ACalculationParameterValue">Name of the variable during report calculation</param>
        /// <param name="AColumnWidth">Default width</param>
        public TPartnerColumnFunction(String ADescription, String ACalculationParameterName, String ACalculationParameterValue,
            double AColumnWidth) :
            base(ADescription, ACalculationParameterName, ACalculationParameterValue)
        {
            FColumnWidth = AColumnWidth;
        }

        /// <summary>
        /// convert a character length to a width in centimeters
        /// </summary>
        /// <returns>void</returns>
        public static double CharLengthToCM(Int32 ACharLength)
        {
            return ACharLength * 0.3;
        }
    }

    /// <summary>
    /// Column function for partner module
    /// </summary>
    public class TFinanceColumnFunction : TColumnFunction
    {
        /// <summary>Show YTD </summary>
        public bool FDisplayYTD;
        /// <summary>Default value to show YTD </summary>
        public bool FDefaultYTD;

        #region TFinanceColumnFunction Implementation
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription"></param>
        public TFinanceColumnFunction(String ADescription) : base(ADescription)
        {
            FDisplayYTD = true;
            FDefaultYTD = false;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription"></param>
        /// <param name="ANumberColumns"></param>
        public TFinanceColumnFunction(String ADescription, System.Int32 ANumberColumns)
            : base(ADescription, ANumberColumns)
        {
            FDisplayYTD = true;
            FDefaultYTD = false;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="ADescription"></param>
        /// <param name="ADisplayYTD"></param>
        /// <param name="ADefaultYTD"></param>
        public TFinanceColumnFunction(String ADescription, bool ADisplayYTD, bool ADefaultYTD) : base(ADescription)
        {
            FDisplayYTD = ADisplayYTD;
            FDefaultYTD = ADefaultYTD;
        }

        #endregion
    }

    /// <summary>
    /// a delegate for running the report preview window
    /// </summary>
    public delegate void TMyUpdateDelegate(TRptCalculator Calculator, Form ACallerForm, String AReportName, bool AWrapColumn);

    /// for accessing the reporting form from the TFrmPetraReportingUtils object
    public interface IFrmReporting : IFrmPetra
    {
        /// <summary>
        /// read the values from the controls on the form
        /// </summary>
        /// <param name="ACalc"></param>
        /// <param name="AReportAction"></param>
        void ReadControls(TRptCalculator ACalc, TReportActionEnum AReportAction);

        /// <summary>
        /// set the values of the controls on the form
        /// </summary>
        /// <param name="AParameters"></param>
        void SetControls(TParameterList AParameters);

        /// <summary>
        /// this is used for writing the captions of the menu items and toolbar buttons for recently used report settings
        /// </summary>
        /// <returns>false if an item with that index does not exist</returns>
        bool GetRecentSettingsItems(int AIndex, out ToolStripItem mniItem, out ToolStripItem tbbItem);

        /// <summary>
        /// this will Check the menu item "Wrap Column"
        /// </summary>
        /// <param name="ACheck">True if the item is to be checked. Otherwise false.</param>
        void CheckWrapColumnMenuItem(bool ACheck);

        /// <summary>
        /// activate and deactivate toolbar buttons and menu items depending on ongoing report calculation
        /// </summary>
        /// <param name="ABusy">True if a report is generated and the close button should be disabled.</param>
        void EnableBusy(bool ABusy);
    }

    /// <summary>This enums defines what action is going on. It's needed e.g. for the ReadControls function </summary>
    public enum TReportActionEnum
    {
        /// <summary> Save </summary>
        raSave,

        /// <summary> Load </summary>
        raLoad,

        /// <summary> Generate </summary>
        raGenerate,
    }
}